// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/rizkyzhang/ayobeli-backend-golang/domain"
)

type AuthUtilMock struct {
	CreateUserStub        func(string, string) (string, error)
	createUserMutex       sync.RWMutex
	createUserArgsForCall []struct {
		arg1 string
		arg2 string
	}
	createUserReturns struct {
		result1 string
		result2 error
	}
	createUserReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	GetAccessTokenStub        func(string, string) (string, error)
	getAccessTokenMutex       sync.RWMutex
	getAccessTokenArgsForCall []struct {
		arg1 string
		arg2 string
	}
	getAccessTokenReturns struct {
		result1 string
		result2 error
	}
	getAccessTokenReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	VerifyTokenStub        func(string) (string, error)
	verifyTokenMutex       sync.RWMutex
	verifyTokenArgsForCall []struct {
		arg1 string
	}
	verifyTokenReturns struct {
		result1 string
		result2 error
	}
	verifyTokenReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *AuthUtilMock) CreateUser(arg1 string, arg2 string) (string, error) {
	fake.createUserMutex.Lock()
	ret, specificReturn := fake.createUserReturnsOnCall[len(fake.createUserArgsForCall)]
	fake.createUserArgsForCall = append(fake.createUserArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.CreateUserStub
	fakeReturns := fake.createUserReturns
	fake.recordInvocation("CreateUser", []interface{}{arg1, arg2})
	fake.createUserMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *AuthUtilMock) CreateUserCallCount() int {
	fake.createUserMutex.RLock()
	defer fake.createUserMutex.RUnlock()
	return len(fake.createUserArgsForCall)
}

func (fake *AuthUtilMock) CreateUserCalls(stub func(string, string) (string, error)) {
	fake.createUserMutex.Lock()
	defer fake.createUserMutex.Unlock()
	fake.CreateUserStub = stub
}

func (fake *AuthUtilMock) CreateUserArgsForCall(i int) (string, string) {
	fake.createUserMutex.RLock()
	defer fake.createUserMutex.RUnlock()
	argsForCall := fake.createUserArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *AuthUtilMock) CreateUserReturns(result1 string, result2 error) {
	fake.createUserMutex.Lock()
	defer fake.createUserMutex.Unlock()
	fake.CreateUserStub = nil
	fake.createUserReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *AuthUtilMock) CreateUserReturnsOnCall(i int, result1 string, result2 error) {
	fake.createUserMutex.Lock()
	defer fake.createUserMutex.Unlock()
	fake.CreateUserStub = nil
	if fake.createUserReturnsOnCall == nil {
		fake.createUserReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.createUserReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *AuthUtilMock) GetAccessToken(arg1 string, arg2 string) (string, error) {
	fake.getAccessTokenMutex.Lock()
	ret, specificReturn := fake.getAccessTokenReturnsOnCall[len(fake.getAccessTokenArgsForCall)]
	fake.getAccessTokenArgsForCall = append(fake.getAccessTokenArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.GetAccessTokenStub
	fakeReturns := fake.getAccessTokenReturns
	fake.recordInvocation("GetAccessToken", []interface{}{arg1, arg2})
	fake.getAccessTokenMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *AuthUtilMock) GetAccessTokenCallCount() int {
	fake.getAccessTokenMutex.RLock()
	defer fake.getAccessTokenMutex.RUnlock()
	return len(fake.getAccessTokenArgsForCall)
}

func (fake *AuthUtilMock) GetAccessTokenCalls(stub func(string, string) (string, error)) {
	fake.getAccessTokenMutex.Lock()
	defer fake.getAccessTokenMutex.Unlock()
	fake.GetAccessTokenStub = stub
}

func (fake *AuthUtilMock) GetAccessTokenArgsForCall(i int) (string, string) {
	fake.getAccessTokenMutex.RLock()
	defer fake.getAccessTokenMutex.RUnlock()
	argsForCall := fake.getAccessTokenArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *AuthUtilMock) GetAccessTokenReturns(result1 string, result2 error) {
	fake.getAccessTokenMutex.Lock()
	defer fake.getAccessTokenMutex.Unlock()
	fake.GetAccessTokenStub = nil
	fake.getAccessTokenReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *AuthUtilMock) GetAccessTokenReturnsOnCall(i int, result1 string, result2 error) {
	fake.getAccessTokenMutex.Lock()
	defer fake.getAccessTokenMutex.Unlock()
	fake.GetAccessTokenStub = nil
	if fake.getAccessTokenReturnsOnCall == nil {
		fake.getAccessTokenReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getAccessTokenReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *AuthUtilMock) VerifyToken(arg1 string) (string, error) {
	fake.verifyTokenMutex.Lock()
	ret, specificReturn := fake.verifyTokenReturnsOnCall[len(fake.verifyTokenArgsForCall)]
	fake.verifyTokenArgsForCall = append(fake.verifyTokenArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.VerifyTokenStub
	fakeReturns := fake.verifyTokenReturns
	fake.recordInvocation("VerifyToken", []interface{}{arg1})
	fake.verifyTokenMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *AuthUtilMock) VerifyTokenCallCount() int {
	fake.verifyTokenMutex.RLock()
	defer fake.verifyTokenMutex.RUnlock()
	return len(fake.verifyTokenArgsForCall)
}

func (fake *AuthUtilMock) VerifyTokenCalls(stub func(string) (string, error)) {
	fake.verifyTokenMutex.Lock()
	defer fake.verifyTokenMutex.Unlock()
	fake.VerifyTokenStub = stub
}

func (fake *AuthUtilMock) VerifyTokenArgsForCall(i int) string {
	fake.verifyTokenMutex.RLock()
	defer fake.verifyTokenMutex.RUnlock()
	argsForCall := fake.verifyTokenArgsForCall[i]
	return argsForCall.arg1
}

func (fake *AuthUtilMock) VerifyTokenReturns(result1 string, result2 error) {
	fake.verifyTokenMutex.Lock()
	defer fake.verifyTokenMutex.Unlock()
	fake.VerifyTokenStub = nil
	fake.verifyTokenReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *AuthUtilMock) VerifyTokenReturnsOnCall(i int, result1 string, result2 error) {
	fake.verifyTokenMutex.Lock()
	defer fake.verifyTokenMutex.Unlock()
	fake.VerifyTokenStub = nil
	if fake.verifyTokenReturnsOnCall == nil {
		fake.verifyTokenReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.verifyTokenReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *AuthUtilMock) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createUserMutex.RLock()
	defer fake.createUserMutex.RUnlock()
	fake.getAccessTokenMutex.RLock()
	defer fake.getAccessTokenMutex.RUnlock()
	fake.verifyTokenMutex.RLock()
	defer fake.verifyTokenMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *AuthUtilMock) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ domain.AuthUtil = new(AuthUtilMock)
