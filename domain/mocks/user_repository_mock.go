// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/rizkyzhang/ayobeli-backend-golang/domain"
)

type UserRepositoryMock struct {
	CreateAdminStub        func(*domain.UserRepositoryPayloadCreateAdmin) error
	createAdminMutex       sync.RWMutex
	createAdminArgsForCall []struct {
		arg1 *domain.UserRepositoryPayloadCreateAdmin
	}
	createAdminReturns struct {
		result1 error
	}
	createAdminReturnsOnCall map[int]struct {
		result1 error
	}
	CreateUserStub        func(*domain.UserRepositoryPayloadCreateUser) (int, error)
	createUserMutex       sync.RWMutex
	createUserArgsForCall []struct {
		arg1 *domain.UserRepositoryPayloadCreateUser
	}
	createUserReturns struct {
		result1 int
		result2 error
	}
	createUserReturnsOnCall map[int]struct {
		result1 int
		result2 error
	}
	GetAdminByUserIDStub        func(int) (*domain.AdminModel, error)
	getAdminByUserIDMutex       sync.RWMutex
	getAdminByUserIDArgsForCall []struct {
		arg1 int
	}
	getAdminByUserIDReturns struct {
		result1 *domain.AdminModel
		result2 error
	}
	getAdminByUserIDReturnsOnCall map[int]struct {
		result1 *domain.AdminModel
		result2 error
	}
	GetUserByEmailStub        func(string) (*domain.UserModel, error)
	getUserByEmailMutex       sync.RWMutex
	getUserByEmailArgsForCall []struct {
		arg1 string
	}
	getUserByEmailReturns struct {
		result1 *domain.UserModel
		result2 error
	}
	getUserByEmailReturnsOnCall map[int]struct {
		result1 *domain.UserModel
		result2 error
	}
	GetUserByFirebaseUIDStub        func(string) (*domain.UserModel, error)
	getUserByFirebaseUIDMutex       sync.RWMutex
	getUserByFirebaseUIDArgsForCall []struct {
		arg1 string
	}
	getUserByFirebaseUIDReturns struct {
		result1 *domain.UserModel
		result2 error
	}
	getUserByFirebaseUIDReturnsOnCall map[int]struct {
		result1 *domain.UserModel
		result2 error
	}
	GetUserByUIDStub        func(string) (*domain.UserModel, error)
	getUserByUIDMutex       sync.RWMutex
	getUserByUIDArgsForCall []struct {
		arg1 string
	}
	getUserByUIDReturns struct {
		result1 *domain.UserModel
		result2 error
	}
	getUserByUIDReturnsOnCall map[int]struct {
		result1 *domain.UserModel
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *UserRepositoryMock) CreateAdmin(arg1 *domain.UserRepositoryPayloadCreateAdmin) error {
	fake.createAdminMutex.Lock()
	ret, specificReturn := fake.createAdminReturnsOnCall[len(fake.createAdminArgsForCall)]
	fake.createAdminArgsForCall = append(fake.createAdminArgsForCall, struct {
		arg1 *domain.UserRepositoryPayloadCreateAdmin
	}{arg1})
	stub := fake.CreateAdminStub
	fakeReturns := fake.createAdminReturns
	fake.recordInvocation("CreateAdmin", []interface{}{arg1})
	fake.createAdminMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *UserRepositoryMock) CreateAdminCallCount() int {
	fake.createAdminMutex.RLock()
	defer fake.createAdminMutex.RUnlock()
	return len(fake.createAdminArgsForCall)
}

func (fake *UserRepositoryMock) CreateAdminCalls(stub func(*domain.UserRepositoryPayloadCreateAdmin) error) {
	fake.createAdminMutex.Lock()
	defer fake.createAdminMutex.Unlock()
	fake.CreateAdminStub = stub
}

func (fake *UserRepositoryMock) CreateAdminArgsForCall(i int) *domain.UserRepositoryPayloadCreateAdmin {
	fake.createAdminMutex.RLock()
	defer fake.createAdminMutex.RUnlock()
	argsForCall := fake.createAdminArgsForCall[i]
	return argsForCall.arg1
}

func (fake *UserRepositoryMock) CreateAdminReturns(result1 error) {
	fake.createAdminMutex.Lock()
	defer fake.createAdminMutex.Unlock()
	fake.CreateAdminStub = nil
	fake.createAdminReturns = struct {
		result1 error
	}{result1}
}

func (fake *UserRepositoryMock) CreateAdminReturnsOnCall(i int, result1 error) {
	fake.createAdminMutex.Lock()
	defer fake.createAdminMutex.Unlock()
	fake.CreateAdminStub = nil
	if fake.createAdminReturnsOnCall == nil {
		fake.createAdminReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createAdminReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *UserRepositoryMock) CreateUser(arg1 *domain.UserRepositoryPayloadCreateUser) (int, error) {
	fake.createUserMutex.Lock()
	ret, specificReturn := fake.createUserReturnsOnCall[len(fake.createUserArgsForCall)]
	fake.createUserArgsForCall = append(fake.createUserArgsForCall, struct {
		arg1 *domain.UserRepositoryPayloadCreateUser
	}{arg1})
	stub := fake.CreateUserStub
	fakeReturns := fake.createUserReturns
	fake.recordInvocation("CreateUser", []interface{}{arg1})
	fake.createUserMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *UserRepositoryMock) CreateUserCallCount() int {
	fake.createUserMutex.RLock()
	defer fake.createUserMutex.RUnlock()
	return len(fake.createUserArgsForCall)
}

func (fake *UserRepositoryMock) CreateUserCalls(stub func(*domain.UserRepositoryPayloadCreateUser) (int, error)) {
	fake.createUserMutex.Lock()
	defer fake.createUserMutex.Unlock()
	fake.CreateUserStub = stub
}

func (fake *UserRepositoryMock) CreateUserArgsForCall(i int) *domain.UserRepositoryPayloadCreateUser {
	fake.createUserMutex.RLock()
	defer fake.createUserMutex.RUnlock()
	argsForCall := fake.createUserArgsForCall[i]
	return argsForCall.arg1
}

func (fake *UserRepositoryMock) CreateUserReturns(result1 int, result2 error) {
	fake.createUserMutex.Lock()
	defer fake.createUserMutex.Unlock()
	fake.CreateUserStub = nil
	fake.createUserReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *UserRepositoryMock) CreateUserReturnsOnCall(i int, result1 int, result2 error) {
	fake.createUserMutex.Lock()
	defer fake.createUserMutex.Unlock()
	fake.CreateUserStub = nil
	if fake.createUserReturnsOnCall == nil {
		fake.createUserReturnsOnCall = make(map[int]struct {
			result1 int
			result2 error
		})
	}
	fake.createUserReturnsOnCall[i] = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *UserRepositoryMock) GetAdminByUserID(arg1 int) (*domain.AdminModel, error) {
	fake.getAdminByUserIDMutex.Lock()
	ret, specificReturn := fake.getAdminByUserIDReturnsOnCall[len(fake.getAdminByUserIDArgsForCall)]
	fake.getAdminByUserIDArgsForCall = append(fake.getAdminByUserIDArgsForCall, struct {
		arg1 int
	}{arg1})
	stub := fake.GetAdminByUserIDStub
	fakeReturns := fake.getAdminByUserIDReturns
	fake.recordInvocation("GetAdminByUserID", []interface{}{arg1})
	fake.getAdminByUserIDMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *UserRepositoryMock) GetAdminByUserIDCallCount() int {
	fake.getAdminByUserIDMutex.RLock()
	defer fake.getAdminByUserIDMutex.RUnlock()
	return len(fake.getAdminByUserIDArgsForCall)
}

func (fake *UserRepositoryMock) GetAdminByUserIDCalls(stub func(int) (*domain.AdminModel, error)) {
	fake.getAdminByUserIDMutex.Lock()
	defer fake.getAdminByUserIDMutex.Unlock()
	fake.GetAdminByUserIDStub = stub
}

func (fake *UserRepositoryMock) GetAdminByUserIDArgsForCall(i int) int {
	fake.getAdminByUserIDMutex.RLock()
	defer fake.getAdminByUserIDMutex.RUnlock()
	argsForCall := fake.getAdminByUserIDArgsForCall[i]
	return argsForCall.arg1
}

func (fake *UserRepositoryMock) GetAdminByUserIDReturns(result1 *domain.AdminModel, result2 error) {
	fake.getAdminByUserIDMutex.Lock()
	defer fake.getAdminByUserIDMutex.Unlock()
	fake.GetAdminByUserIDStub = nil
	fake.getAdminByUserIDReturns = struct {
		result1 *domain.AdminModel
		result2 error
	}{result1, result2}
}

func (fake *UserRepositoryMock) GetAdminByUserIDReturnsOnCall(i int, result1 *domain.AdminModel, result2 error) {
	fake.getAdminByUserIDMutex.Lock()
	defer fake.getAdminByUserIDMutex.Unlock()
	fake.GetAdminByUserIDStub = nil
	if fake.getAdminByUserIDReturnsOnCall == nil {
		fake.getAdminByUserIDReturnsOnCall = make(map[int]struct {
			result1 *domain.AdminModel
			result2 error
		})
	}
	fake.getAdminByUserIDReturnsOnCall[i] = struct {
		result1 *domain.AdminModel
		result2 error
	}{result1, result2}
}

func (fake *UserRepositoryMock) GetUserByEmail(arg1 string) (*domain.UserModel, error) {
	fake.getUserByEmailMutex.Lock()
	ret, specificReturn := fake.getUserByEmailReturnsOnCall[len(fake.getUserByEmailArgsForCall)]
	fake.getUserByEmailArgsForCall = append(fake.getUserByEmailArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetUserByEmailStub
	fakeReturns := fake.getUserByEmailReturns
	fake.recordInvocation("GetUserByEmail", []interface{}{arg1})
	fake.getUserByEmailMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *UserRepositoryMock) GetUserByEmailCallCount() int {
	fake.getUserByEmailMutex.RLock()
	defer fake.getUserByEmailMutex.RUnlock()
	return len(fake.getUserByEmailArgsForCall)
}

func (fake *UserRepositoryMock) GetUserByEmailCalls(stub func(string) (*domain.UserModel, error)) {
	fake.getUserByEmailMutex.Lock()
	defer fake.getUserByEmailMutex.Unlock()
	fake.GetUserByEmailStub = stub
}

func (fake *UserRepositoryMock) GetUserByEmailArgsForCall(i int) string {
	fake.getUserByEmailMutex.RLock()
	defer fake.getUserByEmailMutex.RUnlock()
	argsForCall := fake.getUserByEmailArgsForCall[i]
	return argsForCall.arg1
}

func (fake *UserRepositoryMock) GetUserByEmailReturns(result1 *domain.UserModel, result2 error) {
	fake.getUserByEmailMutex.Lock()
	defer fake.getUserByEmailMutex.Unlock()
	fake.GetUserByEmailStub = nil
	fake.getUserByEmailReturns = struct {
		result1 *domain.UserModel
		result2 error
	}{result1, result2}
}

func (fake *UserRepositoryMock) GetUserByEmailReturnsOnCall(i int, result1 *domain.UserModel, result2 error) {
	fake.getUserByEmailMutex.Lock()
	defer fake.getUserByEmailMutex.Unlock()
	fake.GetUserByEmailStub = nil
	if fake.getUserByEmailReturnsOnCall == nil {
		fake.getUserByEmailReturnsOnCall = make(map[int]struct {
			result1 *domain.UserModel
			result2 error
		})
	}
	fake.getUserByEmailReturnsOnCall[i] = struct {
		result1 *domain.UserModel
		result2 error
	}{result1, result2}
}

func (fake *UserRepositoryMock) GetUserByFirebaseUID(arg1 string) (*domain.UserModel, error) {
	fake.getUserByFirebaseUIDMutex.Lock()
	ret, specificReturn := fake.getUserByFirebaseUIDReturnsOnCall[len(fake.getUserByFirebaseUIDArgsForCall)]
	fake.getUserByFirebaseUIDArgsForCall = append(fake.getUserByFirebaseUIDArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetUserByFirebaseUIDStub
	fakeReturns := fake.getUserByFirebaseUIDReturns
	fake.recordInvocation("GetUserByFirebaseUID", []interface{}{arg1})
	fake.getUserByFirebaseUIDMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *UserRepositoryMock) GetUserByFirebaseUIDCallCount() int {
	fake.getUserByFirebaseUIDMutex.RLock()
	defer fake.getUserByFirebaseUIDMutex.RUnlock()
	return len(fake.getUserByFirebaseUIDArgsForCall)
}

func (fake *UserRepositoryMock) GetUserByFirebaseUIDCalls(stub func(string) (*domain.UserModel, error)) {
	fake.getUserByFirebaseUIDMutex.Lock()
	defer fake.getUserByFirebaseUIDMutex.Unlock()
	fake.GetUserByFirebaseUIDStub = stub
}

func (fake *UserRepositoryMock) GetUserByFirebaseUIDArgsForCall(i int) string {
	fake.getUserByFirebaseUIDMutex.RLock()
	defer fake.getUserByFirebaseUIDMutex.RUnlock()
	argsForCall := fake.getUserByFirebaseUIDArgsForCall[i]
	return argsForCall.arg1
}

func (fake *UserRepositoryMock) GetUserByFirebaseUIDReturns(result1 *domain.UserModel, result2 error) {
	fake.getUserByFirebaseUIDMutex.Lock()
	defer fake.getUserByFirebaseUIDMutex.Unlock()
	fake.GetUserByFirebaseUIDStub = nil
	fake.getUserByFirebaseUIDReturns = struct {
		result1 *domain.UserModel
		result2 error
	}{result1, result2}
}

func (fake *UserRepositoryMock) GetUserByFirebaseUIDReturnsOnCall(i int, result1 *domain.UserModel, result2 error) {
	fake.getUserByFirebaseUIDMutex.Lock()
	defer fake.getUserByFirebaseUIDMutex.Unlock()
	fake.GetUserByFirebaseUIDStub = nil
	if fake.getUserByFirebaseUIDReturnsOnCall == nil {
		fake.getUserByFirebaseUIDReturnsOnCall = make(map[int]struct {
			result1 *domain.UserModel
			result2 error
		})
	}
	fake.getUserByFirebaseUIDReturnsOnCall[i] = struct {
		result1 *domain.UserModel
		result2 error
	}{result1, result2}
}

func (fake *UserRepositoryMock) GetUserByUID(arg1 string) (*domain.UserModel, error) {
	fake.getUserByUIDMutex.Lock()
	ret, specificReturn := fake.getUserByUIDReturnsOnCall[len(fake.getUserByUIDArgsForCall)]
	fake.getUserByUIDArgsForCall = append(fake.getUserByUIDArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetUserByUIDStub
	fakeReturns := fake.getUserByUIDReturns
	fake.recordInvocation("GetUserByUID", []interface{}{arg1})
	fake.getUserByUIDMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *UserRepositoryMock) GetUserByUIDCallCount() int {
	fake.getUserByUIDMutex.RLock()
	defer fake.getUserByUIDMutex.RUnlock()
	return len(fake.getUserByUIDArgsForCall)
}

func (fake *UserRepositoryMock) GetUserByUIDCalls(stub func(string) (*domain.UserModel, error)) {
	fake.getUserByUIDMutex.Lock()
	defer fake.getUserByUIDMutex.Unlock()
	fake.GetUserByUIDStub = stub
}

func (fake *UserRepositoryMock) GetUserByUIDArgsForCall(i int) string {
	fake.getUserByUIDMutex.RLock()
	defer fake.getUserByUIDMutex.RUnlock()
	argsForCall := fake.getUserByUIDArgsForCall[i]
	return argsForCall.arg1
}

func (fake *UserRepositoryMock) GetUserByUIDReturns(result1 *domain.UserModel, result2 error) {
	fake.getUserByUIDMutex.Lock()
	defer fake.getUserByUIDMutex.Unlock()
	fake.GetUserByUIDStub = nil
	fake.getUserByUIDReturns = struct {
		result1 *domain.UserModel
		result2 error
	}{result1, result2}
}

func (fake *UserRepositoryMock) GetUserByUIDReturnsOnCall(i int, result1 *domain.UserModel, result2 error) {
	fake.getUserByUIDMutex.Lock()
	defer fake.getUserByUIDMutex.Unlock()
	fake.GetUserByUIDStub = nil
	if fake.getUserByUIDReturnsOnCall == nil {
		fake.getUserByUIDReturnsOnCall = make(map[int]struct {
			result1 *domain.UserModel
			result2 error
		})
	}
	fake.getUserByUIDReturnsOnCall[i] = struct {
		result1 *domain.UserModel
		result2 error
	}{result1, result2}
}

func (fake *UserRepositoryMock) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createAdminMutex.RLock()
	defer fake.createAdminMutex.RUnlock()
	fake.createUserMutex.RLock()
	defer fake.createUserMutex.RUnlock()
	fake.getAdminByUserIDMutex.RLock()
	defer fake.getAdminByUserIDMutex.RUnlock()
	fake.getUserByEmailMutex.RLock()
	defer fake.getUserByEmailMutex.RUnlock()
	fake.getUserByFirebaseUIDMutex.RLock()
	defer fake.getUserByFirebaseUIDMutex.RUnlock()
	fake.getUserByUIDMutex.RLock()
	defer fake.getUserByUIDMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *UserRepositoryMock) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ domain.UserRepository = new(UserRepositoryMock)
