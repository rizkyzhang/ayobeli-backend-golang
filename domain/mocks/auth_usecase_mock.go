// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"
	"time"

	"github.com/rizkyzhang/ayobeli-backend/domain"
)

type AuthUsecaseMock struct {
	GetAdminByUserIDStub        func(int) (*domain.AdminModel, error)
	getAdminByUserIDMutex       sync.RWMutex
	getAdminByUserIDArgsForCall []struct {
		arg1 int
	}
	getAdminByUserIDReturns struct {
		result1 *domain.AdminModel
		result2 error
	}
	getAdminByUserIDReturnsOnCall map[int]struct {
		result1 *domain.AdminModel
		result2 error
	}
	GetUserByUIDStub        func(string) (*domain.UserModel, error)
	getUserByUIDMutex       sync.RWMutex
	getUserByUIDArgsForCall []struct {
		arg1 string
	}
	getUserByUIDReturns struct {
		result1 *domain.UserModel
		result2 error
	}
	getUserByUIDReturnsOnCall map[int]struct {
		result1 *domain.UserModel
		result2 error
	}
	RefreshAccessTokenStub        func(string) (string, time.Time, error)
	refreshAccessTokenMutex       sync.RWMutex
	refreshAccessTokenArgsForCall []struct {
		arg1 string
	}
	refreshAccessTokenReturns struct {
		result1 string
		result2 time.Time
		result3 error
	}
	refreshAccessTokenReturnsOnCall map[int]struct {
		result1 string
		result2 time.Time
		result3 error
	}
	SignInStub        func(string, string) (string, string, time.Time, time.Time, error)
	signInMutex       sync.RWMutex
	signInArgsForCall []struct {
		arg1 string
		arg2 string
	}
	signInReturns struct {
		result1 string
		result2 string
		result3 time.Time
		result4 time.Time
		result5 error
	}
	signInReturnsOnCall map[int]struct {
		result1 string
		result2 string
		result3 time.Time
		result4 time.Time
		result5 error
	}
	SignUpStub        func(string, string) (string, string, time.Time, time.Time, error)
	signUpMutex       sync.RWMutex
	signUpArgsForCall []struct {
		arg1 string
		arg2 string
	}
	signUpReturns struct {
		result1 string
		result2 string
		result3 time.Time
		result4 time.Time
		result5 error
	}
	signUpReturnsOnCall map[int]struct {
		result1 string
		result2 string
		result3 time.Time
		result4 time.Time
		result5 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *AuthUsecaseMock) GetAdminByUserID(arg1 int) (*domain.AdminModel, error) {
	fake.getAdminByUserIDMutex.Lock()
	ret, specificReturn := fake.getAdminByUserIDReturnsOnCall[len(fake.getAdminByUserIDArgsForCall)]
	fake.getAdminByUserIDArgsForCall = append(fake.getAdminByUserIDArgsForCall, struct {
		arg1 int
	}{arg1})
	stub := fake.GetAdminByUserIDStub
	fakeReturns := fake.getAdminByUserIDReturns
	fake.recordInvocation("GetAdminByUserID", []interface{}{arg1})
	fake.getAdminByUserIDMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *AuthUsecaseMock) GetAdminByUserIDCallCount() int {
	fake.getAdminByUserIDMutex.RLock()
	defer fake.getAdminByUserIDMutex.RUnlock()
	return len(fake.getAdminByUserIDArgsForCall)
}

func (fake *AuthUsecaseMock) GetAdminByUserIDCalls(stub func(int) (*domain.AdminModel, error)) {
	fake.getAdminByUserIDMutex.Lock()
	defer fake.getAdminByUserIDMutex.Unlock()
	fake.GetAdminByUserIDStub = stub
}

func (fake *AuthUsecaseMock) GetAdminByUserIDArgsForCall(i int) int {
	fake.getAdminByUserIDMutex.RLock()
	defer fake.getAdminByUserIDMutex.RUnlock()
	argsForCall := fake.getAdminByUserIDArgsForCall[i]
	return argsForCall.arg1
}

func (fake *AuthUsecaseMock) GetAdminByUserIDReturns(result1 *domain.AdminModel, result2 error) {
	fake.getAdminByUserIDMutex.Lock()
	defer fake.getAdminByUserIDMutex.Unlock()
	fake.GetAdminByUserIDStub = nil
	fake.getAdminByUserIDReturns = struct {
		result1 *domain.AdminModel
		result2 error
	}{result1, result2}
}

func (fake *AuthUsecaseMock) GetAdminByUserIDReturnsOnCall(i int, result1 *domain.AdminModel, result2 error) {
	fake.getAdminByUserIDMutex.Lock()
	defer fake.getAdminByUserIDMutex.Unlock()
	fake.GetAdminByUserIDStub = nil
	if fake.getAdminByUserIDReturnsOnCall == nil {
		fake.getAdminByUserIDReturnsOnCall = make(map[int]struct {
			result1 *domain.AdminModel
			result2 error
		})
	}
	fake.getAdminByUserIDReturnsOnCall[i] = struct {
		result1 *domain.AdminModel
		result2 error
	}{result1, result2}
}

func (fake *AuthUsecaseMock) GetUserByUID(arg1 string) (*domain.UserModel, error) {
	fake.getUserByUIDMutex.Lock()
	ret, specificReturn := fake.getUserByUIDReturnsOnCall[len(fake.getUserByUIDArgsForCall)]
	fake.getUserByUIDArgsForCall = append(fake.getUserByUIDArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetUserByUIDStub
	fakeReturns := fake.getUserByUIDReturns
	fake.recordInvocation("GetUserByUID", []interface{}{arg1})
	fake.getUserByUIDMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *AuthUsecaseMock) GetUserByUIDCallCount() int {
	fake.getUserByUIDMutex.RLock()
	defer fake.getUserByUIDMutex.RUnlock()
	return len(fake.getUserByUIDArgsForCall)
}

func (fake *AuthUsecaseMock) GetUserByUIDCalls(stub func(string) (*domain.UserModel, error)) {
	fake.getUserByUIDMutex.Lock()
	defer fake.getUserByUIDMutex.Unlock()
	fake.GetUserByUIDStub = stub
}

func (fake *AuthUsecaseMock) GetUserByUIDArgsForCall(i int) string {
	fake.getUserByUIDMutex.RLock()
	defer fake.getUserByUIDMutex.RUnlock()
	argsForCall := fake.getUserByUIDArgsForCall[i]
	return argsForCall.arg1
}

func (fake *AuthUsecaseMock) GetUserByUIDReturns(result1 *domain.UserModel, result2 error) {
	fake.getUserByUIDMutex.Lock()
	defer fake.getUserByUIDMutex.Unlock()
	fake.GetUserByUIDStub = nil
	fake.getUserByUIDReturns = struct {
		result1 *domain.UserModel
		result2 error
	}{result1, result2}
}

func (fake *AuthUsecaseMock) GetUserByUIDReturnsOnCall(i int, result1 *domain.UserModel, result2 error) {
	fake.getUserByUIDMutex.Lock()
	defer fake.getUserByUIDMutex.Unlock()
	fake.GetUserByUIDStub = nil
	if fake.getUserByUIDReturnsOnCall == nil {
		fake.getUserByUIDReturnsOnCall = make(map[int]struct {
			result1 *domain.UserModel
			result2 error
		})
	}
	fake.getUserByUIDReturnsOnCall[i] = struct {
		result1 *domain.UserModel
		result2 error
	}{result1, result2}
}

func (fake *AuthUsecaseMock) RefreshAccessToken(arg1 string) (string, time.Time, error) {
	fake.refreshAccessTokenMutex.Lock()
	ret, specificReturn := fake.refreshAccessTokenReturnsOnCall[len(fake.refreshAccessTokenArgsForCall)]
	fake.refreshAccessTokenArgsForCall = append(fake.refreshAccessTokenArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.RefreshAccessTokenStub
	fakeReturns := fake.refreshAccessTokenReturns
	fake.recordInvocation("RefreshAccessToken", []interface{}{arg1})
	fake.refreshAccessTokenMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *AuthUsecaseMock) RefreshAccessTokenCallCount() int {
	fake.refreshAccessTokenMutex.RLock()
	defer fake.refreshAccessTokenMutex.RUnlock()
	return len(fake.refreshAccessTokenArgsForCall)
}

func (fake *AuthUsecaseMock) RefreshAccessTokenCalls(stub func(string) (string, time.Time, error)) {
	fake.refreshAccessTokenMutex.Lock()
	defer fake.refreshAccessTokenMutex.Unlock()
	fake.RefreshAccessTokenStub = stub
}

func (fake *AuthUsecaseMock) RefreshAccessTokenArgsForCall(i int) string {
	fake.refreshAccessTokenMutex.RLock()
	defer fake.refreshAccessTokenMutex.RUnlock()
	argsForCall := fake.refreshAccessTokenArgsForCall[i]
	return argsForCall.arg1
}

func (fake *AuthUsecaseMock) RefreshAccessTokenReturns(result1 string, result2 time.Time, result3 error) {
	fake.refreshAccessTokenMutex.Lock()
	defer fake.refreshAccessTokenMutex.Unlock()
	fake.RefreshAccessTokenStub = nil
	fake.refreshAccessTokenReturns = struct {
		result1 string
		result2 time.Time
		result3 error
	}{result1, result2, result3}
}

func (fake *AuthUsecaseMock) RefreshAccessTokenReturnsOnCall(i int, result1 string, result2 time.Time, result3 error) {
	fake.refreshAccessTokenMutex.Lock()
	defer fake.refreshAccessTokenMutex.Unlock()
	fake.RefreshAccessTokenStub = nil
	if fake.refreshAccessTokenReturnsOnCall == nil {
		fake.refreshAccessTokenReturnsOnCall = make(map[int]struct {
			result1 string
			result2 time.Time
			result3 error
		})
	}
	fake.refreshAccessTokenReturnsOnCall[i] = struct {
		result1 string
		result2 time.Time
		result3 error
	}{result1, result2, result3}
}

func (fake *AuthUsecaseMock) SignIn(arg1 string, arg2 string) (string, string, time.Time, time.Time, error) {
	fake.signInMutex.Lock()
	ret, specificReturn := fake.signInReturnsOnCall[len(fake.signInArgsForCall)]
	fake.signInArgsForCall = append(fake.signInArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.SignInStub
	fakeReturns := fake.signInReturns
	fake.recordInvocation("SignIn", []interface{}{arg1, arg2})
	fake.signInMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3, ret.result4, ret.result5
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3, fakeReturns.result4, fakeReturns.result5
}

func (fake *AuthUsecaseMock) SignInCallCount() int {
	fake.signInMutex.RLock()
	defer fake.signInMutex.RUnlock()
	return len(fake.signInArgsForCall)
}

func (fake *AuthUsecaseMock) SignInCalls(stub func(string, string) (string, string, time.Time, time.Time, error)) {
	fake.signInMutex.Lock()
	defer fake.signInMutex.Unlock()
	fake.SignInStub = stub
}

func (fake *AuthUsecaseMock) SignInArgsForCall(i int) (string, string) {
	fake.signInMutex.RLock()
	defer fake.signInMutex.RUnlock()
	argsForCall := fake.signInArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *AuthUsecaseMock) SignInReturns(result1 string, result2 string, result3 time.Time, result4 time.Time, result5 error) {
	fake.signInMutex.Lock()
	defer fake.signInMutex.Unlock()
	fake.SignInStub = nil
	fake.signInReturns = struct {
		result1 string
		result2 string
		result3 time.Time
		result4 time.Time
		result5 error
	}{result1, result2, result3, result4, result5}
}

func (fake *AuthUsecaseMock) SignInReturnsOnCall(i int, result1 string, result2 string, result3 time.Time, result4 time.Time, result5 error) {
	fake.signInMutex.Lock()
	defer fake.signInMutex.Unlock()
	fake.SignInStub = nil
	if fake.signInReturnsOnCall == nil {
		fake.signInReturnsOnCall = make(map[int]struct {
			result1 string
			result2 string
			result3 time.Time
			result4 time.Time
			result5 error
		})
	}
	fake.signInReturnsOnCall[i] = struct {
		result1 string
		result2 string
		result3 time.Time
		result4 time.Time
		result5 error
	}{result1, result2, result3, result4, result5}
}

func (fake *AuthUsecaseMock) SignUp(arg1 string, arg2 string) (string, string, time.Time, time.Time, error) {
	fake.signUpMutex.Lock()
	ret, specificReturn := fake.signUpReturnsOnCall[len(fake.signUpArgsForCall)]
	fake.signUpArgsForCall = append(fake.signUpArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.SignUpStub
	fakeReturns := fake.signUpReturns
	fake.recordInvocation("SignUp", []interface{}{arg1, arg2})
	fake.signUpMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3, ret.result4, ret.result5
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3, fakeReturns.result4, fakeReturns.result5
}

func (fake *AuthUsecaseMock) SignUpCallCount() int {
	fake.signUpMutex.RLock()
	defer fake.signUpMutex.RUnlock()
	return len(fake.signUpArgsForCall)
}

func (fake *AuthUsecaseMock) SignUpCalls(stub func(string, string) (string, string, time.Time, time.Time, error)) {
	fake.signUpMutex.Lock()
	defer fake.signUpMutex.Unlock()
	fake.SignUpStub = stub
}

func (fake *AuthUsecaseMock) SignUpArgsForCall(i int) (string, string) {
	fake.signUpMutex.RLock()
	defer fake.signUpMutex.RUnlock()
	argsForCall := fake.signUpArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *AuthUsecaseMock) SignUpReturns(result1 string, result2 string, result3 time.Time, result4 time.Time, result5 error) {
	fake.signUpMutex.Lock()
	defer fake.signUpMutex.Unlock()
	fake.SignUpStub = nil
	fake.signUpReturns = struct {
		result1 string
		result2 string
		result3 time.Time
		result4 time.Time
		result5 error
	}{result1, result2, result3, result4, result5}
}

func (fake *AuthUsecaseMock) SignUpReturnsOnCall(i int, result1 string, result2 string, result3 time.Time, result4 time.Time, result5 error) {
	fake.signUpMutex.Lock()
	defer fake.signUpMutex.Unlock()
	fake.SignUpStub = nil
	if fake.signUpReturnsOnCall == nil {
		fake.signUpReturnsOnCall = make(map[int]struct {
			result1 string
			result2 string
			result3 time.Time
			result4 time.Time
			result5 error
		})
	}
	fake.signUpReturnsOnCall[i] = struct {
		result1 string
		result2 string
		result3 time.Time
		result4 time.Time
		result5 error
	}{result1, result2, result3, result4, result5}
}

func (fake *AuthUsecaseMock) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getAdminByUserIDMutex.RLock()
	defer fake.getAdminByUserIDMutex.RUnlock()
	fake.getUserByUIDMutex.RLock()
	defer fake.getUserByUIDMutex.RUnlock()
	fake.refreshAccessTokenMutex.RLock()
	defer fake.refreshAccessTokenMutex.RUnlock()
	fake.signInMutex.RLock()
	defer fake.signInMutex.RUnlock()
	fake.signUpMutex.RLock()
	defer fake.signUpMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *AuthUsecaseMock) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ domain.AuthUsecase = new(AuthUsecaseMock)
